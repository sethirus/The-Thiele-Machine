(let ((a!1 (asserted (ite (xor x_1 (xor x_2 x_3)) true false)))
      (a!2 (rewrite (= (xor x_2 x_3) (not (= x_2 x_3)))))
      (a!3 (= (xor x_1 (xor x_2 x_3)) (xor x_1 (not (= x_2 x_3)))))
      (a!4 (= (xor x_1 (not (= x_2 x_3))) (= x_1 (= x_2 x_3))))
      (a!6 (= (ite (xor x_1 (xor x_2 x_3)) true false)
              (ite (= x_1 (= x_2 x_3)) true false)))
      (a!7 (= (ite (= x_1 (= x_2 x_3)) true false) (= x_1 (= x_2 x_3))))
      (a!8 (= (ite (xor x_1 (xor x_2 x_3)) true false) (= x_1 (= x_2 x_3))))
      (a!9 (asserted (ite (xor x_1 (xor x_2 x_3)) false true)))
      (a!10 (= (ite (xor x_1 (xor x_2 x_3)) false true)
               (ite (= x_1 (= x_2 x_3)) false true)))
      (a!11 (= (ite (= x_1 (= x_2 x_3)) false true) (not (= x_1 (= x_2 x_3)))))
      (a!12 (= (ite (xor x_1 (xor x_2 x_3)) false true)
               (not (= x_1 (= x_2 x_3))))))
(let ((a!5 (trans (monotonicity a!2 a!3)
                  (rewrite a!4)
                  (= (xor x_1 (xor x_2 x_3)) (= x_1 (= x_2 x_3))))))
(let ((a!13 (mp a!9
                (trans (monotonicity a!5 a!10) (rewrite a!11) a!12)
                (not (= x_1 (= x_2 x_3))))))
  (unit-resolution (mp a!1
                       (trans (monotonicity a!5 a!6) (rewrite a!7) a!8)
                       (= x_1 (= x_2 x_3)))
                   a!13
                   false))))